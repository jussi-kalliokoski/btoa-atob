#!/usr/bin/env node

var	fs	= require('fs'),
	buffer	= require('buffer').Buffer,
	argv	= [].slice.call(process.argv, 2);

function readFlag () {
	var 	args	= arguments,
		flagIndex, i, r;

	for (i=0; i<args.length; i++) {
		flagIndex = argv.indexOf(args[i]);
		if (flagIndex !== -1 && argv[flagIndex + 1]) {
			r = argv[flagIndex + 1];
			argv.splice(flagIndex, 2);
			return r;
		}
	}

	return '';
}

function onOut () {
	var data = new Buffer(filedata, 'base64').toString('binary');
	if (outPath){
		try{
			var fileStream = fs.createWriteStream(outPath, {
				encoding:	'UTF-8',
			});
			fileStream.write(data);
			return;
		} catch(e){
			console.error('** ERROR ** Failed to write to file @', outPath);
			process.exit(2);
		}
	}
	process.stdout.write(prefix + data + suffix);
}

var	prefix		= readFlag('-p', '--prefix'),
	suffix		= readFlag('-s', '--suffix'),
	outPath		= readFlag('-o', '--output-to-file'),
	path		= argv[0],
	filedata	= '';

if (path === '--help') {
	console.error('Usage: atob <filepath> [flags]');
	console.error('Flags:');
	console.error('\t-p\t--prefix\t\tThe content of the file before output.');
	console.error('\t-s\t--suffix\t\tThe content of the file after output.');
	console.error('\t-o\t--output-to-file\tThe file to write the output to. If not specified, write to stdout.');
} else if (path) {
	try {
		filedata = fs.readFileSync(path, 'binary');
		onOut();
	} catch(e){
		console.error('Error reading file', path);
		process.exit(1);
	}
} else {
	process.stdin.resume();
	process.stdin.on('data', function (data) {
		filedata += data;
	});

	process.stdin.on('end', function () {
		onOut();
	});
}
